#summary Lo bÃ¡sico de los formularios en Yii.
#labels Phase-Implementation

= Formularios =

The following steps are typically needed when dealing with forms in Yii:

  # Create a model class representing the data fields to be collected;
  # Create a controller action with code that responds to form submission.
  # Create a form in the view script file associated with the controller action.

== Creando el modelo ==

Below we create a LoginForm model class used to collect user input on a login page. Because the login information is only used to authenticate the user and does not need to be saved, we create LoginForm as a form model.

{{{
  class LoginForm extends CFormModel
  {
    public $username;
    public $password;
    public $rememberMe=false;
  }
}}}

Three attributes are declared in LoginForm: $username, $password and $rememberMe. They are used to keep the user-entered username and password, and the option whether the user wants to remember his login. Because $rememberMe has a default value false, the corresponding option when initially displayed in the login form will be unchecked.

== Validando los datos del formulario ==

We specify the validation rules in the rules() method which should return an array of rule configurations.

{{{
  class LoginForm extends CFormModel  {
    public $username;
    public $password;
    public $rememberMe=false;
 
    private $_identity;
 
    public function rules()
    {
        return array(
            array('username, password', 'required'),
            array('rememberMe', 'boolean'),
            array('password', 'authenticate'),
        );
    }
 
    public function authenticate($attribute,$params)
    {
        $this->_identity=new UserIdentity($this->username,$this->password);
        if(!$this->_identity->authenticate())
            $this->addError('password','Incorrect username or password.');
    }
  }
}}}

The above code specifies that username and password are both required, password should be authenticated, and rememberMe should be a boolean.

List of scenarios (on and except parameters) could be specified in two different forms which means the same:

{{{
  // arbitary array with scenario names
  'on'=>array('update', 'create'),
  // string with scenario names separated with commas (spaces are ignored)
  'except'=>'ignore, this, scenarios, at-all',
}}}

There are three ways to specify Validator in a validation rule. First, Validator can be the name of a method in the model class, like authenticate in the above example. The validator method must be of the following signature:

{{{
  /**
   * @param string $attribute the name of the attribute to be validated
   * @param array $params options specified in the validation rule
   */
  public function ValidatorName($attribute,$params) { ... }
}}}

[Yii_Modelo#Las_reglas:_rules() Other way: Validator can be a predefined alias to a validator class.]

== Campos seguros y "repopular formularios" ==

After a model instance is created, we often need to populate its attributes with the data submitted by end-users. This can be done conveniently using the following massive assignment:

{{{
  $model=new LoginForm;
  if(isset($_POST['LoginForm']))
    $model->attributes=$_POST['LoginForm'];
}}}

The last statement is called massive assignment which assigns every entry in $_POST['LoginForm'] to the corresponding model attribute. It is equivalent to the following assignments:

{{{
  foreach($_POST['LoginForm'] as $name=>$value) {
    if($name is a safe attribute)
        $model->$name=$value;
  }
}}}
It is crucial to determine which attributes are safe. An attribute is considered safe if it appears in a validation rule that is applicable in the given scenario.